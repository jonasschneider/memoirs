- def enquote(raw_text)
  - text = raw_text.strip
  - return "<span class=quotesym>„</span>#{text}<span class=quotesym>“</span>"

.memoir{ :class => defined?(on_show_page) ? 'show' : '' }
  %span.number
    %a{ :href => url_for_memoir(memoir) }= @memoir_repo.number(memoir)
  - if memoir.is_quote?
    %p.quote= enquote memoir.quoted_text
    - if memoir.quote_source
      %p.quotesource= memoir.quote_source
  - elsif memoir.is_dialogue?
    - reset_cycle
    - memoir.dialogue_lines.each do |line|
      %p.dialogue{ :class => cycle }
        - if line[:speaker]
          - unless line[:speaker].empty?
            %span.speaker= line[:speaker]
          %span
            - unless line[:style].nil?
              %span.style= line[:style]
            - unless line[:message].nil? || line[:message].empty?
              %span.quote= enquote line[:message]
        - elsif line[:action]
          %span.action= line[:action]
        - else
          = line[:message]
  - else
    %p.quote= memoir.body

  - unless defined?(skip_details)
    .details
      %a{ :href => url_for_memoir(memoir) }== Nummer #{@memoir_repo.number(memoir)} vom #{format_date(memoir.created_at)}
      - if @current_category.the_original? && defined? on_show_page
        = facebook_like_button
