- header do
  %form{ :action => url_for('/search') }
    %input#search_field{ :name => 'query', :placeholder => 'Suchen...' }

#mem.memoir-container= haml :memoir, :locals =>  { :memoir => @memoir }, :layout => false

%button#start{style: 'background: transparent; border: 1px solid #888; border-radius:5px;padding: 10px; font-weight: 100;font-size: 100%;font-variant:small-caps;font-family:inherit', onclick: 'window.next()'}
  weiter
  %br
  %small (Leertaste, Enter)

%script{ src: 'https://code.jquery.com/jquery-2.1.4.min.js', defer: true }
:coffeescript
  default_action = location.href
  locked = false
  window.addEventListener 'DOMContentLoaded', ->
    return if safari? # fuck you and smile

    history.replaceState {mem: $(".permalink").attr("href")}, null, $(".permalink").attr("href")
    document.addEventListener 'keydown', (e) ->
      if e.target == document.querySelector("#search_field")
        return
      e.preventDefault()

      if e.keyCode == 37 # left arrow
        history.back()
      else
        next()

    window.onpopstate = (e) ->
      if e.state && e.state.mem
        e.preventDefault
        next(e.state.mem)

    window.next = next = (popping_action) ->
      action = popping_action || default_action
      return if locked
      locked = true

      oldmem = document.querySelector("#mem")
      return unless oldmem
      oldmem.classList.add("oldmem")

      b = document.querySelector("#start")
      if b
        b.classList.add("btn-leave")
        requestAnimationFrame ->
          requestAnimationFrame ->
            b.classList.add("active")

      k = false
      flip = ->
        return if k
        k = true

        newmem = $("#mem", $(data))[0]
        newmem.classList.add("mem-enter")
        oldmem.parentNode.replaceChild(newmem, oldmem)
        unless popping_action
          history.pushState {mem: $(".permalink").attr("href")}, null, $(".permalink").attr("href")

        # twice to force the repaint and avoid stutter!
        requestAnimationFrame ->
          requestAnimationFrame ->
            newmem.classList.add("active")

        x = false
        newmem.addEventListener "transitionend", ->
          return if x
          x = true
          newmem.classList.remove("mem-enter")
          newmem.classList.remove("active")
          locked = false

      done_page = false
      done_trans = false
      data = null

      done = (data_, r) ->
        data = data_
        done_page = true
        flip() if done_page && done_trans

      oldmem.classList.add("mem-leave")
      requestAnimationFrame ->
        requestAnimationFrame ->
          oldmem.classList.add("active")

      oldmem.addEventListener "transitionend", ->
        done_trans = true
        flip() if done_page && done_trans

      $.ajax
        url: action
        success: done
        dataType: "html"
